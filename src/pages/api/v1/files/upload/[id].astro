---
import { storage, databases } from "@/src/lib/appwrite";
import { ID } from "node-appwrite";

const { id } = Astro.params;

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();

  const files = formData.getAll("files");

  // Verificar si hay archivos vÃ¡lidos
  const validFiles = files.filter(
    file => file instanceof File && file.size > 0
  );

  if (validFiles.length === 0) {
    return Astro.redirect(`/admin/applications/${id}?error=no-files`);
  }

  const fileIds = [];

  try {
    // Obtener el documento actual para acceder a los files existentes
    const currentDoc = await databases.getDocument(
      import.meta.env.PUBLIC_APPWRITE_DB,
      import.meta.env.PUBLIC_APPWRITE_CLIENTS,
      id as string
    );

    // Guardar los files existentes
    const existingFiles = currentDoc.files || [];

    // Subir los nuevos archivos
    for (const file of validFiles) {
      const fileId = await storage.createFile(
        import.meta.env.PUBLIC_APPWRITE_STORAGE,
        ID.unique(),
        file as File
      );

      fileIds.push(fileId["$id"]);
    }

    // Combinar files existentes con nuevos
    const allFiles = [...existingFiles, ...fileIds];

    // Actualizar documento con todos los files
    const result = await databases.updateDocument(
      import.meta.env.PUBLIC_APPWRITE_DB,
      import.meta.env.PUBLIC_APPWRITE_CLIENTS,
      id as string,
      {
        files: allFiles,
      }
    );
  } catch (error) {
    console.error(error);
    return Astro.redirect(`/admin/applications/${id}?error=upload-failed`);
  }
  return Astro.redirect(`/admin/applications/${id}?success=true`);
}
---
